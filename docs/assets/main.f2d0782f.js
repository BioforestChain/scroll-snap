import{p as t,c as e,L as n,h as o}from"./vendor.a33a6d70.js";!function(){const t=document.createElement("link").relList;if(!(t&&t.supports&&t.supports("modulepreload"))){for(const t of document.querySelectorAll('link[rel="modulepreload"]'))e(t);new MutationObserver((t=>{for(const n of t)if("childList"===n.type)for(const t of n.addedNodes)"LINK"===t.tagName&&"modulepreload"===t.rel&&e(t)})).observe(document,{childList:!0,subtree:!0})}function e(t){if(t.ep)return;t.ep=!0;const e=function(t){const e={};return t.integrity&&(e.integrity=t.integrity),t.referrerpolicy&&(e.referrerPolicy=t.referrerpolicy),"use-credentials"===t.crossorigin?e.credentials="include":"anonymous"===t.crossorigin?e.credentials="omit":e.credentials="same-origin",e}(t);fetch(t.href,e)}}();var r=Object.defineProperty,i=Object.getOwnPropertyDescriptor,s=(t,e,n,o)=>{for(var s,l=o>1?void 0:o?i(e,n):e,c=t.length-1;c>=0;c--)(s=t[c])&&(l=(o?s(e,n,l):s(l))||l);return o&&l&&r(e,n,l),l};class l extends CustomEvent{}let c=class extends n{constructor(){super(),this._direction="horizontal",this._currentLayoutIndex=0,this.initElement(),this.addEventListener("layoutchange",(t=>{var e;null==(e=this._onlayoutchange)||e.call(this,t)}))}async initElement(){await this.updateComplete;const t=this.querySelector("[name='scroll-container']");if(!t)throw new Error("Please set the attribute name='scroll-container' in you scroll template");const e=window.getComputedStyle(t,null).scrollSnapType;e.includes("x")?this._direction="horizontal":e.includes("y")?this._direction="vertical":console.error("This element may be doesn't work, if the value of 'scroll-snap-type' is not set or invalid."),this.bindScrollEvent(t)}render(){return o`<slot></slot>`}get onlayoutchange(){return this._onlayoutchange||null}set onlayoutchange(t){"string"==typeof t&&(t=Function("event",`(${t})&&event.preventDefault()`)),"function"!=typeof t&&(t=void 0),this._onlayoutchange=t}async bindScrollEvent(t){t.addEventListener("scroll",(t=>{const e=t.target;if(e){const t=e.getBoundingClientRect(),n={x:t.x,y:t.y},o={x:t.x+t.width,y:t.y+t.height},r=e.childElementCount,i=e.children;for(let e=0;e<r;e++){const t=i[e],r=t.getBoundingClientRect(),s={x:r.x,y:r.y},l={x:r.x+r.width,y:r.y+r.height};if(n.x<=s.x&&n.y<=s.y&&o.x>=l.x&&o.y>=l.y){this._currentLayoutIndex=e,this._emitLayoutChange({index:e,target:t});break}}}}))}_emitLayoutChange(t){this._layoutChangeEvent=new l("layoutchange",{detail:t,cancelable:!0,bubbles:!1,composed:!0}),this.dispatchEvent(this._layoutChangeEvent)}_scrollTo(t,e){const n={behavior:"smooth"};"horizontal"===this._direction?n.left=t.scrollLeft+e:n.top=t.scrollTop+e,t.scrollTo(n)}changeLayoutByIndex(t){const e=this.querySelector("[name='scroll-container']"),n=e.childElementCount-1;let o=(t=Math.min(Math.max(t,0),n))-this._currentLayoutIndex,r=0;for(;o;){const t=e.children[this._currentLayoutIndex+o].getBoundingClientRect();r+="horizontal"===this._direction?t.width:t.height,o>0?o--:o++}r&&(r=t>this._currentLayoutIndex?r:-r,this._scrollTo(e,r))}PreciousLayout(){this.changeLayoutByIndex(this._currentLayoutIndex-1)}NextLayout(){this.changeLayoutByIndex(this._currentLayoutIndex+1)}};s([t({attribute:"onlayoutchange"})],c.prototype,"onlayoutchange",1),c=s([e("scroll-snap")],c);
